package de.scribble.lp.TASTools.fishmanip;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;

import com.google.common.collect.Maps;

import de.scribble.lp.TASTools.CommonProxy;
import de.scribble.lp.TASTools.misc.FileStuff;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;

public class FishManip {
	private File fileLocation;
	
	public FishManip(File saveFile) {
		fileLocation=saveFile;
		if (!saveFile.exists()) {
			StringBuilder toWrite= new StringBuilder();
			toWrite.append("#This file was generated by TASTools, the author is ScribbleLP. Leave blank to disable this feature. Everything starting with a hashtag is a comment");
			FileStuff.writeThings(toWrite, fileLocation, "Creating FishManip file");
		}
	}
	public List<String> readFile() throws IOException{
		return FileStuff.readThings(fileLocation);
	}
	
	public boolean isActive() {
		List<String> completeFile;
		try {
			completeFile = readFile();
		} catch (IOException e) {
			CommonProxy.logger.error("Failed to read file for FishManip for some reason");
			CommonProxy.logger.debug("FishManip:isActive");
			CommonProxy.logger.catching(e);
			return false;
		}
		int i=0;
		for (String line : completeFile) {
			if (line.startsWith("#")){
				continue;
			}
			i++;
			if(i==1) {
				if(line!=null&&!line.isEmpty()) {
					return true;
				}
			}
		}
		return false;
	}
	
	public ItemStack getItemFromTop() {
		List<String> completeFile;
		StringBuilder output = new StringBuilder();
		ItemStack item=null;
		try {
			completeFile = readFile();
		} catch (IOException e) {
			CommonProxy.logger.error("Failed to read file for FishManip for some reason");
			CommonProxy.logger.debug("FishManip:getItemFromTop()");
			CommonProxy.logger.catching(e);
			return null;
		}
		int i=0;
		for (String line : completeFile) {
			if (line.startsWith("#")){
				output.append(line+"\n");
				continue;
			}
			i++;
			if(i==1) {
				Map<String, String> values=splitLine(line);
				if(values!=null) {
					if(values.containsKey("item")) {
						System.out.println(values.get("item"));
					}
					if(values.containsKey("damage")) {
						System.out.println(values.get("damage"));
					}
					if(values.containsKey("enchantment0")) {
						int b=0;
						while(values.containsKey("enchantment"+b)) {
							System.out.println(values.get("enchantment"+b)+" "+values.get("level"+b));
							b++;
						}
					}
				}else System.out.println("._.");
				
				item= new ItemStack(Item.getByNameOrId(line));
				continue;
			}
			output.append(line+"\n");
		}
		if(item==null) {
			item= new ItemStack(Item.getByNameOrId("barrier"));
			item.setStackDisplayName("Something went wrong in FishManip. Check your file");
		}
		//FileStuff.writeThings(output, fileLocation, "Rewriting fish_rigging.txt");
		return item;
	}
	private boolean checkIfCorrect(String line) {
			switch (line) {
			case "cod":
			case "Cod":
				
			case "salmon":
			case "Salmon":
				
			case "clownfish":
			case "Clownfish":
				
			case "pufferfish":
			case "Pufferfish":
				return true;
			default:
				return false;
			}
		
	}
	private Map<String, String> splitLine(String line){
		Map<String, String> output= Maps.<String, String>newHashMap();
		
		String[] split1;
		String[] split2;
		String[] split3;
		String[] split4;
		boolean dmg=false;
		boolean cnt=false;
		boolean ench=false;
		
		if(line.contains(";")) {
			split1=line.split(";");
			output.put("item", split1[0]);
			for (int i = 0; i < split1.length; i++) {
				if(split1[i].startsWith("damage:")) {
					if(dmg) {
						return null;
					}
					split2=split1[i].split(":");
					output.put("damage",split2[1]);
					dmg=true;
				}else if(split1[i].startsWith("enchant:")){
					if(ench) {
						return null;
					}
					split2=split1[i].split(":");
					if(split2[1].contains(",")) {
						split3=split2[1].split(",");
						for (int j = 0; j < split3.length; j++) {
							if(split3[j].contains("[")) {
								split4=split3[j].split("\\[|\\]");
								output.put("enchantment"+j, split4[0]);
								output.put("level"+j,split4[1]);
							}else return null;
						}
					}else {
						if(split2[1].contains("[")) {
							split4=split2[1].split("\\[|\\]");
							output.put("enchantment0", split4[0]);
							output.put("level0",split4[1]);
						}else return null;
					}
					ench=true;
				}
			}
		}else {
			output.put("item", line);
		}
		return output;
	}
}
